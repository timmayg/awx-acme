---
- name: Tasks in this Playbook are for testing purposes only
  hosts: localhost
  gather_facts: false
  vars:
   vault_url: "https://vault.theglens.net:8200"
   vault_mount: "kv"

  tasks:

   - name: 01 - Read The Servers Private Key from Vault
     community.hashi_vault.vault_kv2_get:
      url: "{{ vault_url }}"
      engine_mount_point: "{{ vault_mount }}"
      path: "ssl_vpn_theglens_net_keys"
      auth_method: token
      token: "{{ ansible_password }}"
     register: response


   - name: Timmay HARD STOP this Playbook
     ansible.builtin.meta: end_play




   - name: Generate an OpenSSL Certificate Signing Request
     community.crypto.openssl_csr:
       path: /etc/ssl/csr/www.ansible.com.csr
       privatekey_path: /etc/ssl/private/ansible.com.pem
       common_name: test-csr.theglens.net



   - name: Use community.general.openssl to create a CSR


   - name: 01 - Read The Let's Encrypt Private Key from Vault
     community.hashi_vault.vault_kv2_get:
      url: "{{ vault_url }}"
      engine_mount_point: "{{ vault_mount }}"
      path: "le_stage_key"
      auth_method: token
      token: "{{ ansible_password }}"
     register: response

   - name: 02 - Write the private key to a file
     ansible.builtin.copy:
      content: "{{ response.secret.private_key }}"
      dest: "~/le_private_key.pem"
      mode: '0600'

   - name: Create a challenge for sample.com using a account key file.
     community.crypto.acme_certificate:
       account_email: timmayglen@gmail.com
       account_key_src: ~/le_private_key.pem
       cert: /etc/httpd/ssl/sample.com.crt
       challenge: dns-01
       acme_directory: https://acme-staging-v02.api.letsencrypt.org/directory
       acme_version: 2
       # Renew if the certificate is at least 30 days old
       remaining_days: 60
     register: sample_com_challenge





    - name: Create TXT record with value "unique value"
      community.general.cloudflare_dns:
        api_token: "{{ ansible_password }}"
        record: testansible
        type: TXT
        value: this-is-a-unique-value
        state: present    # present (default), absent
        zone: theglens.net
      register: response



   - name: Pause for a few seconds
     ansible.builtin.pause:
      seconds: 20


   - name: Timmay HARD STOP this Playbook
     ansible.builtin.meta: end_play





   - name: 01- Get the public IP address
     ansible.builtin.uri:
       url: https://api.ipify.org?format=json
       method: Get
     changed_when: false
     register: public_ip
     until: public_ip.status == 200
     retries: 6
     delay: 10

#   - name: Print using msg
#     ansible.builtin.debug:
#       msg: "{{ public_ip.json.ip }}"
#      msg: "{{ public_ip }}"

   - name: 02 - Read The Homenet Inet IP from Vault
     community.hashi_vault.vault_kv2_get:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: "{{ vault_secret }}"
       auth_method: token
       token: "{{ ansible_password }}"
     register: vault_homenet_inet_ip

#   - name: 01 - Set the IP address as a fact
#     ansible.builtin.set_fact:
#      vault_ip_address: "{{ vault_homenet_inet_ip.raw.data.data.ip_addr }}"

#   - name: Print using a var
#     ansible.builtin.debug:
#      var: vault_ip_address



#   - name: Check if IP addresses are the same
#     ansible.builtin.debug:
#       msg: "Old and current IP addresses are the same. Stopping execution."
#     when: public_ip == vault_ip_address
#     register: check_ip_result

   - name: 03 - Stop execution if IPs are the same
     ansible.builtin.meta: end_play
     when: public_ip.json.ip == vault_homenet_inet_ip.raw.data.data.ip_addr

#   - name: Proceed with tasks if IPs are different
#     ansible.builtin.debug:
#       msg: "Old IP: {{ public_ip }}; Current IP: {{ vault_ip_address }}. Continuing with tasks."
#     when: public_ip != vault_ip_address


   - name: 04 - Read Cloudflare API Token from Vault
     community.hashi_vault.vault_kv2_get:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: cloudflare_token
       auth_method: token
       token: "{{ ansible_password }}"
     register: cloudflare_token

#   - name: Print using a var
#     ansible.builtin.debug:
#      var: cloudflare_token.data.data.api_key



   - name: 05 - Delete A record with Old IP address
     community.general.cloudflare_dns:
       api_token: "{{ cloudflare_token.data.data.api_key }}"
       record: ssl-vpn
       type: A
       state: absent   # present (default), absent
       zone: theglens.net
     register: response


#   - name: Print using a var
#     ansible.builtin.debug:
#      var: public_ip

#   - name: Print using a var
#     ansible.builtin.debug:
#      var: public_ip.json.ip


   - name: 06 - Create A record with New IP address
     community.general.cloudflare_dns:
       api_token: "{{ cloudflare_token.data.data.api_key }}"
       record: ssl-vpn
       type: A
       value: "{{ public_ip.json.ip }}"
       state: present    # present (default), absent
       zone: theglens.net
     register: response

   - name: 07 - Create a new Path and two new key-value pairs in the KV2 engine
     community.hashi_vault.vault_kv2_write:
       url: "https://vault.theglens.net:8200"
       path: "{{ vault_secret }}"
       auth_method: token
       token: "{{ ansible_password }}"
       engine_mount_point: "kv"
       data: 
         ip_addr: "{{ public_ip.json.ip }}"





   - name: 01 - Read The Homenet Inet IP from Vault
     community.hashi_vault.vault_kv2_get:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: "{{ vault_secret }}"
       auth_method: token
       token: "{{ ansible_password }}"
     register: vault_homenet_inet_ip










   - name: Query Google DNS for FQDN ssl-vpn.theglens.net
     ansible.builtin.uri:
       url: "https://dns.google/resolve?name=ssl-vpn.theglens.net&type=a&do=1"
       method: GET
       return_content: true
     register: dns_result

   - name: Parse the DNS response and set the IP address as a fact
     ansible.builtin.set_fact:
       current_ip_address: "{{ (dns_result.content | from_json).Answer[0].data }}"

   - name: Print 
     ansible.builtin.debug:
       var: current_ip_address


