---
- name: Create a Certificate using ACME and Store it in Vault
  hosts: localhost
  gather_facts: false
  vars:
    vault_url: "https://vault.theglens.net:8200"
    vault_mount: "kv"

  tasks:
#
#   v2 should
#      - use the aa-Vault Info PROD credential
#
#
    #
    # THESE TWO TASKS ARE FOR TESTING WITH RANDOM FQDNS
    #
    # - name: Generate a random string for use in the FQDN
    #   ansible.builtin.set_fact:
    #     rand: "{{ lookup('community.general.random_string', length=5, lower=true, upper=false, special=false, numbers=false) }}"
    #
    # - name: Build the Random Hostname and FQDN
    #   ansible.builtin.set_fact:
    #     fqdn: "aaa{{ rand }}.theglens.net"

    - name: DEBUG - Print
      ansible.builtin.debug:
        msg: "The fqdn for this certificate will be {{ fqdn }}."

    - name: 01 - Generate a Private Key for the FQDN
      community.crypto.openssl_privatekey:
        curve: secp384r1
        type: ECC
        path: "{{ fqdn }}.key"


    - name: 02 - Generate an OpenSSL public key in PEM format
      community.crypto.openssl_publickey:
        path: "{{ fqdn }}.pub"
        privatekey_path: "{{ fqdn }}.key"



    # - name: XX - REMOVE UPDATE - Read The Cloudflare API Key from Vault
    #   community.hashi_vault.vault_kv2_get:
    #     url: "{{ vault_url }}"
    #     engine_mount_point: "{{ vault_mount }}"
    #     path: "cloudflare_token"
    #     auth_method: token
    #     token: "{{ ansible_password }}"
    #   register: cloudflare_token


    # - name: DEBUG - Print 
    #   ansible.builtin.debug:
    #     msg: "{{ server_private_key.secret.private_key }}"


    - name: 03 - Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ fqdn }}.csr"
        privatekey_path: "{{ fqdn }}.key"
        common_name: "{{ fqdn }}"
        subject_alt_name: "{{ sans }}"


#    - name: DEBUG - Timmay HARD STOP this Playbook
#      ansible.builtin.meta: end_play

#    - name: 03 - DELETE - Read The Let's Encrypt Private Key from Vault
#      community.hashi_vault.vault_kv2_get:
#        url: "{{ vault_url }}"
#        engine_mount_point: "{{ vault_mount }}"
#        path: "{{ key_name }}"
#        auth_method: token
#        token: "{{ ansible_password }}"
#      register: le_private_key


#    - name: 06-old - DELETE - Check whether an account with the given account key exists
#      community.crypto.acme_account_info:
#        account_key_content: "{{ le_private_key.data.data.private_key }}"
#        acme_directory: "{{ acme_directory }}"
#        acme_version: 2
#      register: account_data

# commit msg
# tshoot update le key

    - name: 06-new - DELETE - Check whether an account with the given account key exists
      # This is req to get the account email address for other tasks
      community.crypto.acme_account_info:
        account_key_content: "{{ key }}"
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
      register: account_data


    - name: DEBUG - Print
      ansible.builtin.debug:
        msg: "{{ contact }}"


    - name: DEBUG - Print
      ansible.builtin.debug:
        msg: "{{ key }}"


    # - name: Timmay HARD STOP this Playbook
    #   ansible.builtin.meta: end_play




    - name: 04 - Create the initial ACME Challenge
      community.crypto.acme_certificate:
 #      account_email: "{{ account_data.account.contact[0] | replace('mailto:', '') }}"
        account_email: "{{ contact }}"
        account_key_content: "{{ key }}"
        csr: "{{ fqdn }}.csr"
        cert: "{{ fqdn }}.cer"
        chain: "{{ fqdn }}.chain"
        fullchain: "{{ fqdn }}.fullchain }}"
        challenge: dns-01
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
      register: challenge_response



#
#    - name: DEBUG - Timmay HARD STOP this Playbook
#      ansible.builtin.meta: end_play
#




    #
    #   This task captures if Lets Encrypt Requires a DNS-01 Challenge
    #   If the result is pending, then we need to create a DNS TXT record
    #   If the result is valid, then we can proceed to the next step
    #   All this does is show the result. 
    #
    # - name: POSSAFFECTED - 08 - Capture the ACME Challenge Response
    #   ansible.builtin.set_fact:
    #     challenge_status: "{{ challenge_response.authorizations[fqdn].status }}"




    - name: 05 - Capture ACME Challenge Responses for All Domains
      ansible.builtin.set_fact:
        challenge_status: "{{ challenge_response.authorizations | dict2items | items2dict(key_name='key', value_name='value') }}"


    # - name: Print
    #   ansible.builtin.debug:
    #     msg: "{{ challenge_response }}"


    # - name: POSSAFFECTED - 09 - Extract FQDN and DNS Challenge Text from ACME Response
    #   ansible.builtin.set_fact:
    #     dns_01_challenge_text: "{{ challenge_response.challenge_data[fqdn]['dns-01'].resource_value }}"
    #     dns_01_challenge_fqdn: "{{ challenge_response.challenge_data[fqdn]['dns-01'].record.split('.')[0:2] | join('.') }}"
    #   when: challenge_status == 'pending'


    - name: 06 - Extract FQDN and DNS Challenge Text for Each Domain
      ansible.builtin.set_fact:
        dns_01_challenge_texts: "{{ dns_01_challenge_texts | default({}) | combine({item.key: item.value.challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='token') | list | first }) }}"
        dns_01_challenge_fqdns: "{{ dns_01_challenge_fqdns | default({}) | combine({item.key: item.value.challenges | selectattr('type', 'equalto', 'dns-01') | map(attribute='validationRecord') | map(attribute='hostname') | list | first }) }}"
      loop: "{{ challenge_status | dict2items }}"
      when: item.value.status == 'pending'



    - name: DEBUG - Timmay HARD STOP this Playbook
      ansible.builtin.meta: end_play




    # - name: DEBUG - Print
    #   ansible.builtin.debug:
    #     msg: "DNS-01 challenge text is: {{ dns_01_challenge_text }}"
    #     msg: "DNS-01 certificate FQDN is: {{ dns_01_challenge_fqdn }}"

    - name: POSSAFFECTED - 10 - Create DNS TXT record with DNS-01 Challenge Text
      community.general.cloudflare_dns:
        api_token: "{{ cloudflare_token.data.data.api_key }}"
        record: "{{ dns_01_challenge_fqdn }}"
        type: TXT
        value: "{{ dns_01_challenge_text }}"
        state: present    # present (default), absent
        zone: "{{ zone }}"
      register: cloudflare_dns_create
      when: challenge_status == 'pending'


    - name: 11 - Pause the Playbook for 20 seconds
      ansible.builtin.pause:
        seconds: 20
      when: challenge_status == 'pending'  


    - name: 12 - Let the ACME Challenge be Validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_email: "{{ account_data.account.contact[0] | replace('mailto:', '') }}"
        account_key_content: "{{ le_private_key }}"
        csr: "{{ fqdn }}.csr"
        cert: "{{ fqdn }}.cer"
        chain: "{{ fqdn }}.chain"
        fullchain: "{{ fqdn }}.fullchain"
        challenge: dns-01
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
        data: "{{ challenge_response }}"
      register: certificate_response


    # - name: DEBUG - cat the cert file
    #   ansible.builtin.shell: cat "{{ fqdn }}.cer"
    #   register: cert_file


    - name: POSSAFFECTED - 13 - Delete the DNS TXT record (if it exists)
      community.general.cloudflare_dns:
        api_token: "{{ cloudflare_token.data.data.api_key }}"
        record: "{{ dns_01_challenge_fqdn }}"
        type: TXT
        state: absent    # present (default), absent
        zone: "{{ zone }}"
      # register: cloudflare_dns_delete
      when: challenge_status == 'pending'
      ignore_errors: yes


    - name: 14 - Create the binary PKCS12 File using Community Crypto OpenSSL_Pkcs12
      community.crypto.openssl_pkcs12:
        action: export
        friendly_name: "{{ fqdn }}"
        privatekey_path: "{{ fqdn }}.key"
        certificate_path: "{{ fqdn }}.fullchain"
        path: pkcs12_file.bin.p12
        passphrase: "{{ pkcs12_passphrase }}"
        state: present


    - name: 15 - Encode the PKCS12 file to base64 Text
      ansible.builtin.command: "openssl base64 -in pkcs12_file.bin.p12 -out pkcs12_file.p12.txt"


    - name: 16 - Write the New Certificate to Vault
      community.hashi_vault.vault_kv2_write:
        url: "{{ vault_url }}"
        engine_mount_point: "{{ vault_mount }}"
        path: "{{ fqdn }}"
        data:
          public_key: "{{ lookup('file', '{{ fqdn }}.pub') }}"
          private_key: "{{ lookup('file', '{{ fqdn }}.key') }}"
          cert: "{{ lookup('file', '{{ fqdn }}.cer') }}"
          chain: "{{ lookup('file', '{{ fqdn }}.chain') }}"
          fullchain: "{{ lookup('file', '{{ fqdn }}.fullchain') }}"
          p12_in_base64: "{{ lookup('file', 'pkcs12_file.p12.txt') }}"
        auth_method: token
        token: "{{ ansible_password }}"




    - name: DEBUG - Timmay HARD STOP this Playbook
      ansible.builtin.meta: end_play

    - name: DEBUG - Timmay HARD STOP this Playbook
      ansible.builtin.meta: end_play

