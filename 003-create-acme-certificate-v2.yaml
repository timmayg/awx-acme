---
- name: Create a Certificate using ACME and Store it in Vault
  hosts: localhost
  gather_facts: false
  vars:
    vault_url: "https://vault.theglens.net:8200"
    vault_mount: "kv"

  tasks:
#
#   v2 should
#      - use the aa-Vault Info PROD credential
#
#

    - name: DEBUG - Print
      ansible.builtin.debug:
        msg: "The fqdn for this certificate will be {{ fqdn }}."

    - name: 01 - Generate a Private Key for the FQDN
      community.crypto.openssl_privatekey:
        curve: secp384r1
        type: ECC
        path: "{{ fqdn }}.key"


    - name: 02 - Generate an OpenSSL public key in PEM format
      community.crypto.openssl_publickey:
        path: "{{ fqdn }}.pub"
        privatekey_path: "{{ fqdn }}.key"


    - name: 03 - Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ fqdn }}.csr"
        privatekey_path: "{{ fqdn }}.key"
        common_name: "{{ fqdn }}"
        subject_alt_name: "{{ sans }}"


    - name: 04 - Create the initial ACME Challenge
      community.crypto.acme_certificate:
        account_email: "{{ contact }}"
        account_key_content: "{{ key }}"
        csr: "{{ fqdn }}.csr"
        cert: "{{ fqdn }}.cer"
        chain: "{{ fqdn }}.chain"
        fullchain: "{{ fqdn }}.fullchain }}"
        challenge: dns-01
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
      register: challenge_response


    - name: 05 - Extract pending DNS-01 challenges
      ansible.builtin.set_fact:
        pending_challenges: "{{ challenge_response.authorizations | default({}) | dict2items | selectattr('value.status', 'equalto', 'pending') | list }}"


    - name: 06 - Create DNS TXT record with DNS-01 Challenge Text
      community.general.cloudflare_dns:
        api_token: "{{ cloudflare_api_key }}"
        record: "_acme-challenge.{{ item.0.key }}"
        type: TXT
        value: "{{ item.1.token }}"
        state: present
        zone: "{{ zone }}"
      loop: "{{ pending_challenges | subelements('value.challenges', skip_missing=True) | selectattr('1.type', 'equalto', 'dns-01') | list }}"
      loop_control:
        label: "_acme-challenge.{{ item.0.key }}"
      register: cloudflare_dns_create


    - name: 07 - Pause the Playbook for 20 seconds
      ansible.builtin.pause:
        seconds: 20
      # when: challenge_status == 'pending'


    - name: 08 - Let the ACME Challenge be Validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_email: "{{ contact }}"
        account_key_content: "{{ key }}"
        csr: "{{ fqdn }}.csr"
        cert: "{{ fqdn }}.cer"
        chain: "{{ fqdn }}.chain"
        fullchain: "{{ fqdn }}.fullchain"
        challenge: dns-01
        acme_directory: "{{ acme_directory }}"
        acme_version: 2
        # Renew if the certificate is at least 30 days old
        remaining_days: 60
        data: "{{ challenge_response }}"
      register: certificate_response


    # - name: DEBUG - cat the cert file
    #   ansible.builtin.shell: cat "{{ fqdn }}.cer"
    #   register: cert_file


    - name: POSSAFFECTED - 13 - Delete the DNS TXT record (if it exists)
      community.general.cloudflare_dns:
        api_token: "{{ cloudflare_token.data.data.api_key }}"
        record: "{{ dns_01_challenge_fqdn }}"
        type: TXT
        state: absent    # present (default), absent
        zone: "{{ zone }}"
      # register: cloudflare_dns_delete
      when: challenge_status == 'pending'
      ignore_errors: yes


    - name: 14 - Create the binary PKCS12 File using Community Crypto OpenSSL_Pkcs12
      community.crypto.openssl_pkcs12:
        action: export
        friendly_name: "{{ fqdn }}"
        privatekey_path: "{{ fqdn }}.key"
        certificate_path: "{{ fqdn }}.fullchain"
        path: pkcs12_file.bin.p12
        passphrase: "{{ pkcs12_passphrase }}"
        state: present


    - name: 15 - Encode the PKCS12 file to base64 Text
      ansible.builtin.command: "openssl base64 -in pkcs12_file.bin.p12 -out pkcs12_file.p12.txt"


    - name: 16 - Write the New Certificate to Vault
      community.hashi_vault.vault_kv2_write:
        url: "{{ vault_url }}"
        engine_mount_point: "{{ vault_mount }}"
        path: "{{ fqdn }}"
        data:
          public_key: "{{ lookup('file', '{{ fqdn }}.pub') }}"
          private_key: "{{ lookup('file', '{{ fqdn }}.key') }}"
          cert: "{{ lookup('file', '{{ fqdn }}.cer') }}"
          chain: "{{ lookup('file', '{{ fqdn }}.chain') }}"
          fullchain: "{{ lookup('file', '{{ fqdn }}.fullchain') }}"
          p12_in_base64: "{{ lookup('file', 'pkcs12_file.p12.txt') }}"
        auth_method: token
        token: "{{ ansible_password }}"




    - name: DEBUG - Timmay HARD STOP this Playbook
      ansible.builtin.meta: end_play

    - name: DEBUG - Timmay HARD STOP this Playbook
      ansible.builtin.meta: end_play

