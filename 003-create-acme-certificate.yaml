---
- name: Create a Certificate using ACME and Store it in Vault
  hosts: localhost
  gather_facts: false
  vars:
   vault_url: "https://vault.theglens.net:8200"
   vault_mount: "kv"
   fqdn: "lab-ftd.theglens.net"
   le_email: "timmayglen@gmail.com"
   le_directory: "https://acme-staging-v02.api.letsencrypt.org/directory"
   le_key: "le_stage_key"
#   le_key: "le_prod_key"
#   le_directory: "https://acme-v02.api.letsencrypt.org/directory"

  tasks:

   - name: Generate a random FQDN
     ansible.builtin.set_fact:
       rand: "{{ lookup('community.general.random_string', length=7, lower=true, upper=false, special=false, numbers=false) }}"


   - name: Generate a random FQDN
     ansible.builtin.set_fact:
       fqdn: "{{ rand }}.theglens.net"


   - name: 01 - Read The TLS Server Private Key from Vault
     community.hashi_vault.vault_kv2_get:
      url: "{{ vault_url }}"
      engine_mount_point: "{{ vault_mount }}"
      path: generic_use_ec384_keys
      #path: "{{ fqdn | replace('.', '_') }}_keys"
      auth_method: token
      token: "{{ ansible_password }}"
     register: server_private_key


   - name: 02 - Read The Let's Encrypt Private Key from Vault
     community.hashi_vault.vault_kv2_get:
      url: "{{ vault_url }}"
      engine_mount_point: "{{ vault_mount }}"
      path: "{{ le_key }}"
      auth_method: token
      token: "{{ ansible_password }}"
     register: le_private_key


   - name: 03 - Read The Cloudflare API Key from Vault
     community.hashi_vault.vault_kv2_get:
      url: "{{ vault_url }}"
      engine_mount_point: "{{ vault_mount }}"
      path: "cloudflare_token"
      auth_method: token
      token: "{{ ansible_password }}"
     register: cloudflare_token


#   - name: Print 
#     ansible.builtin.debug:
#       msg: "{{ cloudflare_token.data.data.api_key }}"


   - name: 04 - Generate an OpenSSL Certificate Signing Request
     community.crypto.openssl_csr:
       path: "{{ fqdn }}.csr"
       privatekey_content: "{{ server_private_key.secret.private_key }}"
       common_name: "{{ fqdn }}"


   - name: 05 - Create an ACME Challenge
     community.crypto.acme_certificate:
       account_email: "{{ le_email }}"
       account_key_content: "{{ le_private_key.secret.private_key }}"
       csr: "{{ fqdn }}.csr"
       cert: "{{ fqdn }}.cer"
       chain: "{{ fqdn }}.chain"
       fullchain: "{{ fqdn }}.fullchain"
       challenge: dns-01
       acme_directory: "{{ le_directory }}"
       acme_version: 2
       # Renew if the certificate is at least 30 days old
       remaining_days: 60
     register: challenge_response




#   - name: 0a - Print
#     ansible.builtin.debug:
#       msg: "{{ challenge_response }}"


#  Change this from msg to var
#   - name: 0a1 - Print
#     ansible.builtin.debug:
#       msg: "{{ challenge_response }}"


#   - name: 06 - Extract DNS-01 challenge resource_value
#     ansible.builtin.set_fact:
#       dns_01_challenge_text: "{{ challenge_response.challenge_data['test-csr.theglens.net']['dns-01'].resource_value }}"






   - name: 06 - Extract FQDN and DNS Challenge Text from ACME Response
     ansible.builtin.set_fact:
       dns_01_challenge_text: "{{ challenge_response.challenge_data[fqdn]['dns-01'].resource_value }}"
       dns_01_challenge_fqdn: "{{ challenge_response.challenge_data[fqdn]['dns-01'].record.split('.')[0:2] | join('.') }}"



   - name: Print
     ansible.builtin.debug:
       msg: "DNS-01 challenge text is: {{ dns_01_challenge_text }}"
       msg: "DNS-01 certificate FQDN is: {{ dns_01_challenge_fqdn }}"




   - name: 07 - Create DNS TXT record with value "unique value"
     community.general.cloudflare_dns:
       api_token: "{{ cloudflare_token.data.data.api_key }}"
       record: "{{ dns_01_challenge_fqdn }}"
       type: TXT
       value: "{{ dns_01_challenge_text }}"
       state: present    # present (default), absent
       zone: theglens.net
     register: cloudflare_dns_create


   - name: 08 - Pause the Playbook for 20 seconds
     ansible.builtin.pause:
       seconds: 20


   - name: 09 - Let the ACME Challenge be Validated and retrieve the cert and intermediate certificate
     community.crypto.acme_certificate:
       account_email: "{{ le_email }}"
       account_key_content: "{{ le_private_key.secret.private_key }}"
       csr: "{{ fqdn }}.csr"
       cert: "{{ fqdn }}.cer"
       chain: "{{ fqdn }}.chain"
       fullchain: "{{ fqdn }}.fullchain"
       challenge: dns-01
       acme_directory: "{{ le_directory }}"
       acme_version: 2
       # Renew if the certificate is at least 30 days old
       remaining_days: 60
       data: "{{ challenge_response }}"
     register: certificate_response
#     when: sample_com_challenge is changed


#   - name: cat the cert file
#     ansible.builtin.shell: cat "{{ fqdn }}.cer"
#     register: cert_file


   - name: 10 - Delete the DNS TXT record (if it exists)
     community.general.cloudflare_dns:
       api_token: "{{ cloudflare_token.data.data.api_key }}"
       record: "{{ dns_01_challenge_fqdn }}"
       type: TXT
       state: absent    # present (default), absent
       zone: theglens.net
#     register: cloudflare_dns_delete


   - name: 11 - Write the New Certificate to Vault
     community.hashi_vault.vault_kv2_write:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: "{{ fqdn }}"
       data:
         cert: "{{ lookup('file', '{{ fqdn }}.cer') }}"
         chain: "{{ lookup('file', '{{ fqdn }}.chain') }}"
         fullchain: "{{ lookup('file',  '{{ fqdn }}.fullchain') }}"
       auth_method: token
       token: "{{ ansible_password }}"


   - name: 12 - Read the New Certificate from Vault, REQD for the next step 
     community.hashi_vault.vault_kv2_get:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: "{{ fqdn }}"
       auth_method: token
       token: "{{ ansible_password }}"
     register: current


   - name: 13 - Append the Public Key to Vault Secret
     vars:
       values_to_update:
          fullchain: "{{ lookup('file',  '{{ fqdn }}.fullchain') }}"
     community.hashi_vault.vault_kv2_write:
       url: "{{ vault_url }}"
       engine_mount_point: "{{ vault_mount }}"
       path: "{{ fqdn }}"
       data: >-
         {{
           current.secret
           | combine(values_to_update)
         }}
       auth_method: token
       token: "{{ ansible_password }}"


   - name: Timmay HARD STOP this Playbook
     ansible.builtin.meta: end_play


